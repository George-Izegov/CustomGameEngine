////////////////////////////////////////////////////////////////////////////////
// Filename: deferred.ps
////////////////////////////////////////////////////////////////////////////////

//////////////
// TEXTURES //
//////////////
Texture2D shaderTexture : register(t0);
Texture2D depthTexture : register(t1);


///////////////////
// SAMPLE STATES //
///////////////////
SamplerState SampleTypeWrap : register(s0);


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;

    float4 lightViewPosition : TEXCOORD1;
	float3 viewDirection : TEXCOORD2;
};
cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};
struct PixelOutputType
{
    float4 color : SV_Target0;
    float4 normal : SV_Target1;
    float4 omr : SV_Target2;
};
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelOutputType DeferredPixelShader(PixelInputType input) : SV_TARGET
{
    float lightIntensity;
    float3 reflection;
    float4 specular;
    float4 diffuseTexture;
    float4 finalColor;
    
    //Shadows
    float2 projectTexCoord;
    float depthValue;
	float lightDepthValue;
    float bias;

    PixelOutputType output;
    
    bias = 0.001f;
    // Sample the color from the texture and store it for output to the render target.
    diffuseTexture = shaderTexture.Sample(SampleTypeWrap, input.tex);
	
    // Store the normal for output to the render target.
    output.normal = float4(input.normal, 1.0f);
    
    finalColor = ambientColor;

    
   	// Calculate the projected texture coordinates.
	projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;
    if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
		depthValue = depthTexture.Sample(SampleTypeWrap, projectTexCoord).r;

		// Calculate the depth of the light.
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		// Subtract the bias from the lightDepthValue.
		lightDepthValue = lightDepthValue - bias;

        if(lightDepthValue < depthValue)
		{
            lightIntensity = saturate(dot(input.normal, -input.lightViewPosition));
            if (lightIntensity > 0.0f)
            {
                finalColor += (diffuseColor * lightIntensity);
                finalColor = saturate(finalColor);
                reflection = normalize(2 * lightIntensity * input.normal);
                specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
            }
        }
    }
    finalColor = finalColor * diffuseTexture;
    output.color = finalColor;
    output.omr = specular; 
    
    return output;
}